from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ContentType, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.utils.callback_data import CallbackData
from keyboards.default.markup import *
from states import ProductState, CategoryState
from aiogram.types.chat import ChatActions
# from handlers.user.menu import settings
from loader import dp, bot, session, engine, delete
from filters import IsAdmin
from hashlib import md5
from models import User, Messages, Product, Order, Order_items, Payment, Category
import handlers
import keyboards


category_cb = CallbackData('category', 'id', 'action')
product_cb = CallbackData('product', 'id', 'action')

add_product = "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"
delete_category = "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"



#  –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ—Å—Ç–æ—è—â–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î + –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message_handler(IsAdmin(), commands='setting')
async def create_setting_keyboard(message: Message):
    markup = InlineKeyboardMarkup()
    request = session.query(Category).all()
    if len(request)>0:
        for category in request:
            markup.add(InlineKeyboardButton(
                category.category_name, callback_data=category_cb.new(id=category.id, action='view')))

    markup.add(InlineKeyboardButton(
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",callback_data='add_category'))
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", reply_markup=markup)



# –û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@dp.callback_query_handler(IsAdmin(), category_cb.filter(action='view'))
async def category_callback_handler(query: CallbackQuery, callback_data: dict, state: FSMContext):
    category_id = callback_data['id']
    products_from_category = session.query(Product).filter_by(category_id=category_id)
    await query.message.delete()
    await query.answer('–í—Å–µ —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:')
    await query.message.answer('–í—Å–µ —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:')
    await state.update_data(category_index=category_id)  # –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (FSMContext) –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # await show_products(query.message, products_from_category, category_id)



# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ add_category
@dp.callback_query_handler(IsAdmin(), text='add_category')
async def add_category_callback_handler(query: CallbackQuery):
    await query.message.delete()
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await CategoryState.category_name.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ CategoryState.title –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é



@dp.message_handler(IsAdmin(), state=CategoryState.category_name)
async def set_category_title(message: Message, state: FSMContext):
    category_title = message.text
    add_category_title = Category(
        category_name = category_title
    )
    session.merge(add_category_title)
    session.commit()
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ CategoryState
    await create_setting_keyboard(message)  # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã




@dp.message_handler(IsAdmin(), commands='delete_category')
async def delede_category_handler(message: Message, state: FSMContext):

    async with state.proxy() as data:
        if 'category_index' in data.keys():

            index = data['category_index']

            # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
            session.execute(delete(Product).where(
                Product.category_id == session.query(Category.id).filter(Category.id == index)))

            # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            session.execute(delete(Category).where(Category.id == index))

            session.commit()









#TODO: #################################################################
# add product


@dp.message_handler(IsAdmin(), text=add_product)
async def process_add_product(message: Message):
    await ProductState.product_name.set()

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(cancel_message)

    await message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ?', reply_markup=markup)


# "–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ" –∏–ª–∏ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
@dp.message_handler(IsAdmin(), text=cancel_message, state=ProductState.product_name)
async def process_cancel(message: Message, state: FSMContext):
    await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=ReplyKeyboardRemove())
    await state.finish()

    await create_setting_keyboard(message)


# "–ù–∞–∑–∞–¥" –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.message_handler(IsAdmin(), text=back_message, state=ProductState.product_name)
async def process_title_back(message: Message, state: FSMContext):
    await process_add_product(message)


@dp.message_handler(IsAdmin(), state=ProductState.product_name)
async def process_title(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['product_name'] = message.text

    await ProductState.next()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç (–ö–ª—é—áüîë)', reply_markup=back_markup())


@dp.message_handler(IsAdmin(), text=back_message, state=ProductState.body)
async def process_body_back(message: Message, state: FSMContext):
    await ProductState.product_name.set()

    async with state.proxy() as data:
        await message.answer(f"–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å <b>{data['product_name']}</b>?", reply_markup=back_markup())


@dp.message_handler(IsAdmin(), state=ProductState.body)
async def process_body(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['body'] = message.text

    await ProductState.next()
    await message.answer('–§–æ—Ç–æ?', reply_markup=back_markup())


@dp.message_handler(IsAdmin(), content_types=ContentType.PHOTO, state=ProductState.image)
async def process_image_photo(message: Message, state: FSMContext):
    fileID = message.photo[-1].file_id
    file_info = await bot.get_file(fileID)
    downloaded_file = (await bot.download_file(file_info.file_path)).read()

    async with state.proxy() as data:
        data['image'] = downloaded_file

    await ProductState.next()
    await message.answer('–¶–µ–Ω–∞?', reply_markup=back_markup())


@dp.message_handler(IsAdmin(), content_types=ContentType.TEXT, state=ProductState.image)
async def process_image_url(message: Message, state: FSMContext):
    if message.text == back_message:

        await ProductState.body.set()

        async with state.proxy() as data:

            await message.answer(f"–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å <b>{data['body']}</b>?", reply_markup=back_markup())

    else:

        await message.answer('–í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.')


@dp.message_handler(IsAdmin(), lambda message: not message.text.isdigit(), state=ProductState.price)
async def process_price_invalid(message: Message, state: FSMContext):
    if message.text == back_message:

        await ProductState.image.set()

        async with state.proxy() as data:

            await message.answer("–î—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?", reply_markup=back_markup())

    else:

        await message.answer('–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞!')


@dp.message_handler(IsAdmin(), lambda message: message.text.isdigit(), state=ProductState.price)
async def process_price(message: Message, state: FSMContext):


@dp.message_handler(IsAdmin(), lambda message: message.text not in [back_message, all_right_message],
                    state=ProductState.confirm)
async def process_confirm_invalid(message: Message, state: FSMContext):
    await message.answer('–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ –±—ã–ª–æ.')


@dp.message_handler(IsAdmin(), text=back_message, state=ProductState.confirm)
async def process_confirm_back(message: Message, state: FSMContext):
    await ProductState.price.set()

    async with state.proxy() as data:
        await message.answer(f"–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É —Å <b>{data['price']}</b>?", reply_markup=back_markup())















# @dp.message_handler(IsAdmin(), text=all_right_message, state=ProductState.confirm)
# async def process_confirm(message: Message, state: FSMContext):
#     async with state.proxy() as data:
#         product_name = data['product_name']
#         body = data['body']
#         image = data['image']
#         price = data['price']
#
#         tag = db.fetchone(
#             'SELECT title FROM categories WHERE idx=?', (data['category_index'],))[0]
#         idx = md5(' '.join([title, body, price, tag]
#                            ).encode('utf-8')).hexdigest()
#
#         db.query('INSERT INTO products VALUES (?, ?, ?, ?, ?, ?)',
#                  (idx, title, body, image, int(price), tag))
#
#     await state.finish()
#     await message.answer('–ì–æ—Ç–æ–≤–æ!', reply_markup=ReplyKeyboardRemove())
#     await create_setting_keyboard(message)
#
#
# # delete product
#
#
# @dp.callback_query_handler(IsAdmin(), product_cb.filter(action='delete'))
# async def delete_product_callback_handler(query: CallbackQuery, callback_data: dict):
#     product_idx = callback_data['id']
#     db.query('DELETE FROM products WHERE idx=?', (product_idx,))
#     await query.answer('–£–¥–∞–ª–µ–Ω–æ!')
#     await query.message.delete()
#
#
# async def show_products(m, products, category_idx):
#     await bot.send_chat_action(m.chat.id, ChatActions.TYPING)
#
#     for idx, title, body, image, price, tag in products:
#         text = f'<b>{title}</b>\n\n{body}\n\n–¶–µ–Ω–∞: {price} —Ä—É–±–ª–µ–π.'
#
#         markup = InlineKeyboardMarkup()
#         markup.add(InlineKeyboardButton(
#             'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', callback_data=product_cb.new(id=idx, action='delete')))
#
#         await m.answer_photo(photo=image,
#                              caption=text,
#                              reply_markup=markup)
#
#     markup = ReplyKeyboardMarkup()
#     markup.add(add_product)
#     markup.add(delete_category)
#
#     await m.answer('–•–æ—Ç–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å?', reply_markup=markup)

